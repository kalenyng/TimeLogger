-- ============================================
-- TIME LOGGER DATABASE SETUP
-- Run this in your Supabase SQL Editor
-- ============================================

-- Tables
create table if not exists public.work_logs (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users(id) on delete cascade,
  start_time timestamptz not null default now(),
  pause_time timestamptz,
  end_time timestamptz,
  total_seconds integer not null default 0,
  description text,
  created_at timestamptz not null default now()
);

create table if not exists public.tasks (
  id bigint generated by default as identity primary key,
  work_log_id bigint not null references public.work_logs(id) on delete cascade,
  user_id uuid not null references auth.users(id) on delete cascade,
  description text not null,
  duration integer not null default 0,
  created_at timestamptz not null default now()
);

-- Per-user settings (currency, hourly rate)
create table if not exists public.user_settings (
  user_id uuid primary key references auth.users(id) on delete cascade,
  currency text not null default 'GBP',
  hourly_rate numeric not null default 10,
  updated_at timestamptz not null default now()
);

-- Indexes for better query performance
create index if not exists idx_work_logs_user on public.work_logs(user_id, start_time desc);
create index if not exists idx_work_logs_active on public.work_logs(user_id, end_time) where end_time is null;
create index if not exists idx_tasks_worklog on public.tasks(work_log_id, created_at);

-- Enable Row Level Security
alter table public.work_logs enable row level security;
alter table public.tasks enable row level security;
alter table public.user_settings enable row level security;

-- Drop existing policies if they exist
drop policy if exists "work_logs_select" on public.work_logs;
drop policy if exists "work_logs_modify" on public.work_logs;
drop policy if exists "tasks_select" on public.tasks;
drop policy if exists "tasks_modify" on public.tasks;
drop policy if exists "user_settings_select" on public.user_settings;
drop policy if exists "user_settings_modify" on public.user_settings;

-- RLS Policies for work_logs
create policy "work_logs_select" 
  on public.work_logs for select 
  using (auth.uid() = user_id);

create policy "work_logs_modify" 
  on public.work_logs for all 
  using (auth.uid() = user_id) 
  with check (auth.uid() = user_id);

-- RLS Policies for tasks
create policy "tasks_select" 
  on public.tasks for select 
  using (auth.uid() = user_id);

create policy "tasks_modify" 
  on public.tasks for all 
  using (auth.uid() = user_id) 
  with check (auth.uid() = user_id);

-- RLS Policies for user_settings
create policy "user_settings_select"
  on public.user_settings for select
  using (auth.uid() = user_id);

create policy "user_settings_modify"
  on public.user_settings for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- Grant necessary permissions
grant usage on schema public to postgres, anon, authenticated, service_role;
grant all privileges on all tables in schema public to postgres, anon, authenticated, service_role;
grant all privileges on all sequences in schema public to postgres, anon, authenticated, service_role;

-- Success message
do $$
begin
  raise notice 'Database setup completed successfully!';
  raise notice 'Tables created: work_logs, tasks';
  raise notice 'RLS policies enabled';
end $$;

