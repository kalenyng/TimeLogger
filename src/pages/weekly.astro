---
import BaseLayout from '../layouts/BaseLayout.astro';
import { supabase } from '../lib/supabase';
import { startOfWeek, endOfWeek, eachDayOfInterval, format, parseISO } from 'date-fns';

// Check authentication
const { data: { user } } = await supabase.auth.getUser();

if (!user) {
  return Astro.redirect('/login');
}

// Get current week boundaries (Monday-Sunday)
const url = new URL(Astro.request.url);
const baseDateStr = url.searchParams.get('date');
const baseDate = baseDateStr ? new Date(baseDateStr) : new Date();
const weekStart = startOfWeek(baseDate, { weekStartsOn: 1 });
const weekEnd = endOfWeek(baseDate, { weekStartsOn: 1 });

// Calculate prev/next week URLs
const prevWeekDate = new Date(weekStart);
prevWeekDate.setDate(prevWeekDate.getDate() - 1);
const nextWeekDate = new Date(weekEnd);
nextWeekDate.setDate(nextWeekDate.getDate() + 1);
const prevUrl = `/weekly?date=${prevWeekDate.toISOString().slice(0,10)}`;
const nextUrl = `/weekly?date=${nextWeekDate.toISOString().slice(0,10)}`;

// Load user settings (currency and hourly rate)
const settingsRes = await supabase
  .from('user_settings')
  .select('currency, hourly_rate')
  .eq('user_id', user.id)
  .maybeSingle();
const settings = settingsRes.data as { currency: string; hourly_rate: number } | null;

const currency = settings?.currency ?? 'GBP';
const hourlyRate = Number(settings?.hourly_rate ?? 10);

// Fetch work logs for the week
const logsRes = await supabase
  .from('work_logs')
  .select('start_time, total_seconds, hourly_rate_at_time')
  .eq('user_id', user.id)
  .gte('start_time', weekStart.toISOString())
  .lte('start_time', weekEnd.toISOString());
const logs = (logsRes.data as { start_time: string; total_seconds: number; hourly_rate_at_time: number | null }[] | null) || [];

// Initialize all days with 0
const daysData: Record<string, number> = {};
const allDays = eachDayOfInterval({ start: weekStart, end: weekEnd });
allDays.forEach(day => {
  daysData[format(day, 'yyyy-MM-dd')] = 0;
});

// Aggregate seconds by day
logs.forEach(log => {
  const dateKey = format(parseISO(log.start_time), 'yyyy-MM-dd');
  daysData[dateKey] = (daysData[dateKey] || 0) + (log.total_seconds || 0);
});

// Prepare chart data
const labels = Object.keys(daysData).map(d => format(parseISO(d), 'EEE MMM d'));
const hoursData = Object.values(daysData).map(s => Math.round((s / 3600) * 100) / 100);

// Compute earnings per day using the rate stored on each log if available
const earningsByDay: Record<string, number> = {};
Object.keys(daysData).forEach(k => { earningsByDay[k] = 0; });
// Also compute total hours grouped by hourly rate snapshot (overall and per day)
const hoursByRate: Record<string, number> = {};
const hoursByRateByDay: Record<string, Record<string, number>> = {};
Object.keys(daysData).forEach(k => { hoursByRateByDay[k] = {}; });
logs.forEach(log => {
  const dateKey = format(parseISO(log.start_time), 'yyyy-MM-dd');
  const rate = typeof log.hourly_rate_at_time === 'number' && !isNaN(log.hourly_rate_at_time)
    ? log.hourly_rate_at_time
    : hourlyRate;
  const hours = (log.total_seconds || 0) / 3600;
  earningsByDay[dateKey] = (earningsByDay[dateKey] || 0) + (hours * rate);
  const key = String(Math.round(rate * 100) / 100);
  hoursByRate[key] = (hoursByRate[key] || 0) + hours;
  hoursByRateByDay[dateKey][key] = (hoursByRateByDay[dateKey][key] || 0) + hours;
});

function currencySymbol(code: string) {
  switch (code) {
    case 'USD': return '$';
    case 'EUR': return '€';
    case 'GBP': return '£';
    case 'JPY': return '¥';
    case 'AUD': return 'A$';
    case 'CAD': return 'C$';
    case 'ZAR': return 'R';
    default: return code + ' ';
  }
}
const symbol = currencySymbol(currency);

// Format time
function formatTime(seconds: number): string {
  const h = Math.floor(seconds / 3600);
  const m = Math.floor((seconds % 3600) / 60);
  return `${h}h ${m}m`;
}

// Calculate total week hours
const totalWeekSeconds = Object.values(daysData).reduce((a, b) => a + b, 0);
const totalWeekHours = Math.round((totalWeekSeconds / 3600) * 100) / 100;
const totalWeekEarnings = Math.round((Object.values(earningsByDay).reduce((a, b) => a + b, 0)) * 100) / 100;
const rateBreakdown = Object.entries(hoursByRate)
  .sort((a, b) => Number(a[0]) - Number(b[0]))
  .map(([rate, hrs]) => `${hrs.toFixed(2)}h @ ${symbol}${Number(rate).toFixed(2)}`)
  .join(' + ');

// Per-day rate text aligned with labels (same order as Object.keys(daysData))
const rateTextByIndex = Object.keys(daysData).map(d => {
  const perRate = Object.keys(hoursByRateByDay[d] || {})
    .sort((a, b) => Number(a) - Number(b))
    .map((rate) => `@ ${symbol}${Number(rate).toFixed(2)}`)
    .join(' + ');
  return perRate;
});
---

<BaseLayout title="Weekly Report">
  <div class="weekly-page">
    <div class="page-header">
      <div>
        <h1 class="page-title">Weekly Report</h1>
        <p class="page-subtitle">
          {format(weekStart, 'MMM d')} - {format(weekEnd, 'MMM d, yyyy')}
        </p>
      </div>
      <div class="header-actions">
        <a href={prevUrl} class="btn btn-ghost">← Previous</a>
        <a href={nextUrl} class="btn btn-ghost">Next →</a>
      </div>
    </div>

    <!-- Week Summary Cards -->
    <div class="summary-cards">
      <div class="summary-card card">
        <div class="summary-icon summary-icon-primary">
          <svg width="24" height="24" viewBox="0 0 20 20" fill="none" stroke="currentColor">
            <circle cx="10" cy="10" r="7" stroke-width="2"/>
            <path d="M10 5v5l3 3" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </div>
        <div class="summary-content">
          <div class="summary-label">Total Hours</div>
          <div class="summary-value">{totalWeekHours.toFixed(2)}</div>
        </div>
      </div>

      <div class="summary-card card">
        <div class="summary-icon summary-icon-success">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M3 18h18" stroke-width="2" stroke-linecap="round"/>
            <path d="M3 14l5-5 4 4 6-6 3 3" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M21 10V6h-4" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </div>
        <div class="summary-content">
      <div class="summary-label">Earnings</div>
      <div class="summary-value">{symbol}{totalWeekEarnings.toFixed(2)}</div>
        </div>
      </div>

      <div class="summary-card card">
        <div class="summary-icon summary-icon-info">
          <svg width="24" height="24" viewBox="0 0 20 20" fill="none" stroke="currentColor">
            <rect x="3" y="4" width="14" height="14" rx="2" stroke-width="2"/>
            <path d="M7 2v4M13 2v4M3 8h14" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </div>
        <div class="summary-content">
          <div class="summary-label">Days Worked</div>
          <div class="summary-value">{Object.values(daysData).filter(s => s > 0).length}</div>
        </div>
      </div>
    </div>

    <!-- Chart -->
    <div class="card chart-card">
      <h3 class="chart-title">Daily Hours</h3>
      <div class="chart-container">
        <canvas id="weeklyChart"></canvas>
      </div>
    </div>

    <!-- Daily Breakdown Table -->
    <div class="card table-card">
      <h3 class="table-title">Daily Breakdown</h3>
      <div class="table-container">
        <table class="data-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>Hours Worked</th>
              <th>Earnings ({symbol})</th>
              <th>Clear</th>
            </tr>
          </thead>
          <tbody>
            {Object.entries(daysData).map(([date, seconds]) => {
              const hours = Math.round((seconds / 3600) * 100) / 100;
              const earnings = Math.round((earningsByDay[date] || 0) * 100) / 100;
              const perRate = Object.keys(hoursByRateByDay[date] || {})
                .sort((a, b) => Number(a) - Number(b))
                .map((rate) => `@ ${symbol}${Number(rate).toFixed(2)}`)
                .join(' + ');
              return (
                <tr>
                  <td>{format(parseISO(date), 'EEEE, MMM d, yyyy')}</td>
                  <td class="editable-hours" data-date={date} data-hours={hours.toFixed(2)} title="Click to edit hours">
                    <div class="table-number">{hours.toFixed(2)}</div>
                    {perRate && (
                      <div class="table-subtext">{perRate}</div>
                    )}
                  </td>
                  <td class="table-number">{symbol}{earnings.toFixed(2)}</td>
                  <td>
                    <form method="POST" action="/api/delete-day" class="inline-form">
                      <input type="hidden" name="date" value={date} />
                      <button class="btn btn-xs btn-danger" title="Clear day" onclick="return confirm('Clear all logs for this day?')">Clear</button>
                    </form>
                  </td>
                </tr>
              );
            })}
          </tbody>
          <tfoot>
            <tr>
              <td><strong>Total</strong></td>
              <td class="table-number"><strong>{totalWeekHours.toFixed(2)}</strong></td>
              <td class="table-number"><strong>{symbol}{totalWeekEarnings.toFixed(2)}</strong></td>
            </tr>
          </tfoot>
        </table>
      </div>
    </div>
  </div>

  <script define:vars={{ labels, hoursData, rateTextByIndex }}>
    // Load Chart.js and render immediately
    async function initChart() {
      const canvas = document.getElementById('weeklyChart');
      if (!canvas || !(canvas instanceof HTMLCanvasElement)) return;

      async function ensureChart() {
        if (window.Chart) return window.Chart;
        await new Promise((resolve, reject) => {
          const s = document.createElement('script');
          s.src = 'https://cdn.jsdelivr.net/npm/chart.js@4.5.1/dist/chart.umd.js';
          s.onload = () => resolve();
          s.onerror = (e) => reject(e);
          document.head.appendChild(s);
        });
        return window.Chart;
      }

      try {
        const Chart = await ensureChart();
        const ctx = canvas.getContext('2d');
        if (!ctx) return;
        new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: 'Hours Worked',
              data: hoursData,
              backgroundColor: 'rgba(59, 130, 246, 0.8)',
              borderColor: 'rgba(59, 130, 246, 1)',
              borderWidth: 2,
              borderRadius: 8,
              hoverBackgroundColor: 'rgba(59, 130, 246, 1)'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: { display: false },
              tooltip: {
                backgroundColor: 'rgba(17, 24, 39, 0.95)',
                padding: 12,
                titleColor: '#f9fafb',
                bodyColor: '#e5e7eb',
                borderColor: '#374151',
                borderWidth: 1,
                cornerRadius: 8,
                displayColors: false,
                callbacks: {
                  label: (context) => `${context.parsed.y} hours`,
                  afterLabel: (context) => {
                    const t = rateTextByIndex?.[context.dataIndex];
                    return t ? t : '';
                  }
                }
              }
            },
            scales: {
              y: {
                beginAtZero: true,
                grid: { color: 'rgba(107, 114, 128, 0.1)' },
                ticks: { color: '#9ca3af', font: { family: "'Inter', sans-serif", size: 12 } },
                title: { display: true, text: 'Hours', color: '#9ca3af', font: { family: "'Inter', sans-serif", size: 13, weight: '500' } }
              },
              x: {
                grid: { display: false },
                ticks: { color: '#9ca3af', font: { family: "'Inter', sans-serif", size: 12 } }
              }
            }
          }
        });
      } catch (e) {
        console.error('Failed to load chart', e);
      }
    }

    // Init chart on load
    initChart();

    // Inline edit handler for hours cells
    const table = document.querySelector('.data-table');
      table && table.addEventListener('click', (e) => {
        const target = e.target;
        if (!(target instanceof HTMLElement)) return;
        const td = target.closest('.editable-hours');
        if (!(td instanceof HTMLTableCellElement)) return;
        if (!td) return;
        if (td.querySelector('input')) return; // already editing
        const date = td.getAttribute('data-date') || '';
        const current = td.getAttribute('data-hours') || td.textContent || '0';
        const input = document.createElement('input');
        input.type = 'number';
        input.step = '0.01';
        input.min = '0';
        input.value = current;
        input.className = 'form-input form-input-sm inline-editor';
        td.textContent = '';
        td.appendChild(input);
        input.focus();
        input.select();

        async function save() {
          const hours = Number(input.value);
          if (!Number.isFinite(hours) || hours < 0) { td.textContent = current; return; }
          const form = new FormData();
          form.set('date', date);
          form.set('hours', String(hours));
          const res = await fetch('/api/edit-day', { method: 'POST', body: form });
          if (res.ok) {
            // Reload to recompute earnings correctly (preserves per-log rates)
            window.location.reload();
          } else {
            td.textContent = current; // revert
          }
        }

        input.addEventListener('keydown', (ev) => {
          if (ev.key === 'Enter') { ev.preventDefault(); input.blur(); }
          if (ev.key === 'Escape') { td.textContent = current; }
        });
        input.addEventListener('blur', save);
      });
    });
  </script>
</BaseLayout>

<style>
  .weekly-page {
    max-width: 1200px;
    margin: 0 auto;
  }

  /* Page Header */
  .page-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: var(--space-2xl);
  }

  .header-actions {
    display: flex;
    gap: var(--space-sm);
    align-items: center;
  }

  .page-title {
    font-size: var(--text-4xl);
    font-weight: 700;
    margin-bottom: var(--space-xs);
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .page-subtitle {
    font-size: var(--text-lg);
    color: var(--color-muted);
    margin: 0;
  }

  /* Summary Cards */
  .summary-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--space-lg);
    margin-bottom: var(--space-2xl);
  }

  .summary-card {
    display: flex;
    align-items: center;
    gap: var(--space-lg);
    padding: var(--space-xl);
  }

  .summary-icon {
    width: 56px;
    height: 56px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-md);
    flex-shrink: 0;
  }

  .summary-icon-primary {
    background: var(--color-accent-light);
    color: var(--color-accent);
  }

  .summary-icon-success {
    background: var(--color-success-light);
    color: var(--color-success);
  }

  .summary-icon-info {
    background: rgba(6, 182, 212, 0.1);
    color: var(--color-info);
  }

  .summary-content {
    flex: 1;
  }

  .summary-label {
    font-size: var(--text-sm);
    color: var(--color-muted);
    font-weight: 500;
    margin-bottom: var(--space-xs);
  }

  .summary-value {
    font-size: var(--text-3xl);
    font-weight: 700;
    color: var(--color-text);
    line-height: 1;
  }

  .summary-subtext {
    margin-top: 6px;
    font-size: var(--text-xs);
    color: var(--color-muted);
  }

  /* Chart */
  .chart-card {
    padding: var(--space-xl);
    margin-bottom: var(--space-2xl);
  }

  .chart-title {
    font-size: var(--text-xl);
    font-weight: 600;
    margin-bottom: var(--space-xl);
    color: var(--color-text);
  }

  .chart-container {
    height: 400px;
  }
  .chart-container canvas { width: 100% !important; height: 100% !important; display: block; }

  /* Table */
  .table-card {
    padding: var(--space-xl);
  }

  .table-title {
    font-size: var(--text-xl);
    font-weight: 600;
    margin-bottom: var(--space-lg);
    color: var(--color-text);
  }

  .table-container {
    overflow-x: auto;
  }

  .data-table {
    width: 100%;
    border-collapse: collapse;
  }

  .data-table thead {
    background: var(--color-bg-secondary);
    border-bottom: 2px solid var(--color-border);
  }

  .data-table th {
    padding: var(--space-md) var(--space-lg);
    text-align: left;
    font-size: var(--text-sm);
    font-weight: 600;
    color: var(--color-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .data-table tbody tr {
    border-bottom: 1px solid var(--color-border);
    transition: background var(--transition-fast);
  }

  .data-table tbody tr:hover {
    background: var(--color-bg-secondary);
  }

  .data-table td {
    padding: var(--space-md) var(--space-lg);
    font-size: var(--text-sm);
    color: var(--color-text);
  }

  .editable-hours {
    cursor: pointer;
  }

  .inline-editor {
    width: 70px;
    height: 24px;
    font-size: var(--text-xs);
    padding: 0 var(--space-xs);
  }

  .table-number {
    font-family: var(--font-mono);
    font-weight: 500;
  }

  .table-subtext {
    margin-top: 4px;
    font-size: var(--text-xs);
    color: var(--color-muted);
  }

  .data-table tfoot {
    background: var(--color-bg-secondary);
    border-top: 2px solid var(--color-border);
  }

  .data-table tfoot td {
    padding: var(--space-lg);
    font-size: var(--text-base);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      gap: var(--space-lg);
    }

    .summary-cards {
      grid-template-columns: 1fr;
    }

    .chart-container {
      height: 300px;
    }

    .page-title {
      font-size: var(--text-3xl);
    }

    .data-table th,
    .data-table td {
      padding: var(--space-sm) var(--space-md);
      font-size: var(--text-xs);
    }
  }
</style>

