---
import BaseLayout from '../layouts/BaseLayout.astro';
import { supabase } from '../lib/supabase';

// Check authentication
const { data: { user } } = await supabase.auth.getUser();

if (!user) {
  return Astro.redirect('/login');
}

// Motivational quotes
const quotes = [
  "The only way to do great work is to love what you do. — Steve Jobs",
  "Success is not final, failure is not fatal: It is the courage to continue that counts. — Winston Churchill",
  "Don't watch the clock; do what it does. Keep going. — Sam Levenson",
  "Hard work beats talent when talent doesn't work hard. — Tim Notke",
  "Dream big and dare to fail. — Norman Vaughan",
  "Start where you are. Use what you have. Do what you can. — Arthur Ashe",
  "The future depends on what you do today. — Mahatma Gandhi",
  "Believe you can and you're halfway there. — Theodore Roosevelt",
  "Quality is not an act, it is a habit. — Aristotle",
  "It always seems impossible until it's done. — Nelson Mandela",
  "Success usually comes to those who are too busy to be looking for it. — Henry David Thoreau",
  "You miss 100% of the shots you don't take. — Wayne Gretzky",
  "In the middle of every difficulty lies opportunity. — Albert Einstein",
  "Keep your face always toward the sunshine—and shadows will fall behind you. — Walt Whitman",
  "Act as if what you do makes a difference. It does. — William James",
  "Either you run the day or the day runs you. — Jim Rohn",
  "Do what you can, with what you have, where you are. — Theodore Roosevelt",
  "The harder the conflict, the greater the triumph. — George Washington",
  "Don't wait. The time will never be just right. — Napoleon Hill",
  "Believe in yourself and all that you are. — Christian D. Larson",
  "The best way out is always through. — Robert Frost"
];

const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];

// Fetch current work log
type WorkLogRow = { id: number; start_time: string; pause_time: string | null; end_time: string | null; total_seconds: number };
const { data: currentLogs } = await supabase
  .from('work_logs')
  .select('*')
  .eq('user_id', user.id)
  .is('end_time', null)
  .order('id', { ascending: false })
  .limit(1);

const currentLog = ((currentLogs as WorkLogRow[] | null) || [])[0] || null;

// Fetch tasks for current log
let tasks: any[] = [];
if (currentLog) {
  const { data: tasksData } = await supabase
    .from('tasks')
    .select('*')
    .eq('work_log_id', currentLog.id)
    .order('created_at', { ascending: true });
  
  tasks = tasksData || [];
}

// Format time helper
function formatTime(seconds: number): string {
  const h = Math.floor(seconds / 3600);
  const m = Math.floor((seconds % 3600) / 60);
  const s = seconds % 60;
  return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
}

// Format date for display
function formatDateTime(dateStr: string): string {
  const date = new Date(dateStr);
  return date.toLocaleString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  });
}
---

<BaseLayout title="Timer">
  <div class="dashboard">
    <!-- Timer Card -->
    <div class="card timer-card">
      <div class="timer-display" id="timer">00:00:00</div>
      <div class="timer-status" id="status">
        {currentLog ? (currentLog.pause_time ? 'Paused' : 'Working...') : 'Not started'}
      </div>

      {currentLog && (
        <div class="timer-info">
          Started at: {formatDateTime(currentLog.start_time)}
        </div>
      )}
    </div>

    <!-- Actions -->
    {!currentLog ? (
      <div class="actions-card card">
        <blockquote class="motivational-quote">
          {randomQuote}
        </blockquote>
        <form method="POST" action="/api/start">
          <button type="submit" class="btn btn-success btn-lg">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor">
              <path d="M5 3l12 7-12 7V3z" fill="currentColor" stroke="none"/>
            </svg>
            Start Work
          </button>
        </form>
      </div>
    ) : (
      <div class="actions-grid">
        {currentLog.pause_time ? (
          <form method="POST" action="/api/resume">
            <button type="submit" class="btn btn-primary">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor">
                <path d="M5 3l12 7-12 7V3z" fill="currentColor" stroke="none"/>
              </svg>
              Resume Work
            </button>
          </form>
        ) : (
          <form method="POST" action="/api/pause">
            <button type="submit" class="btn btn-warning">
              <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                <rect x="5" y="4" width="3" height="12" rx="1"/>
                <rect x="12" y="4" width="3" height="12" rx="1"/>
              </svg>
              Pause Work
            </button>
          </form>
        )}

        <form method="POST" action="/api/complete-task" class="task-form">
          <input
            type="text"
            name="description"
            placeholder="What did you complete?"
            class="form-input"
            required
          />
          <button type="submit" class="btn btn-success">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor">
              <path d="M4 10l4 4L16 6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            Complete Task
          </button>
        </form>

        <form method="POST" action="/api/end-day">
          <button type="submit" class="btn btn-danger">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor">
              <rect x="4" y="4" width="12" height="12" rx="1" stroke-width="2"/>
            </svg>
            End Day
          </button>
        </form>
      </div>
    )}

    <!-- Completed Tasks -->
    {tasks.length > 0 && (
      <div class="card tasks-card">
        <h3 class="tasks-title">Completed Tasks</h3>
        <ul class="tasks-list">
          {tasks.map((task) => (
            <li class="task-item">
              <span class="task-description">{task.description}</span>
              <span class="task-duration">{formatTime(task.duration)}</span>
            </li>
          ))}
        </ul>
      </div>
    )}
  </div>

  <script define:vars={{ currentLog }}>
    const startTime = currentLog ? Math.floor(new Date(currentLog.start_time).getTime() / 1000) : null;
    const isPaused = currentLog ? !!currentLog.pause_time : false;
    let totalSeconds = currentLog?.total_seconds || 0;

    function formatTime(seconds) {
      const h = String(Math.floor(seconds / 3600)).padStart(2, '0');
      const m = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');
      const s = String(seconds % 60).padStart(2, '0');
      return `${h}:${m}:${s}`;
    }

    function updateTimer() {
      let seconds = totalSeconds;
      if (!isPaused && startTime) {
        const now = Math.floor(Date.now() / 1000);
        seconds += (now - startTime);
      }
      const timerEl = document.getElementById('timer');
      if (timerEl) {
        timerEl.textContent = formatTime(seconds);
      }
    }

    updateTimer();
    if (!isPaused && startTime) {
      setInterval(updateTimer, 1000);
    }
  </script>
</BaseLayout>

<style>
  .dashboard {
    display: flex;
    flex-direction: column;
    gap: var(--space-xl);
    max-width: 900px;
    margin: 0 auto;
  }

  /* Timer Card */
  .timer-card {
    text-align: center;
    padding: var(--space-3xl);
    background: var(--color-surface);
    position: relative;
    overflow: hidden;
  }

  .timer-card::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(59, 130, 246, 0.05) 0%, transparent 70%);
    pointer-events: none;
  }

  .timer-display {
    font-size: 5rem;
    font-weight: 800;
    font-family: var(--font-mono);
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    letter-spacing: -0.02em;
    margin-bottom: var(--space-md);
  }

  .timer-status {
    font-size: var(--text-lg);
    color: var(--color-muted);
    font-weight: 500;
    margin-bottom: var(--space-sm);
  }

  .timer-info {
    font-size: var(--text-sm);
    color: var(--color-muted);
  }

  /* Actions */
  .actions-card {
    padding: var(--space-2xl);
    text-align: center;
  }

  .motivational-quote {
    font-size: var(--text-lg);
    font-style: italic;
    color: var(--color-text-secondary);
    margin-bottom: var(--space-xl);
    line-height: 1.6;
  }

  .actions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-md);
  }

  .actions-grid form {
    display: flex;
  }

  .actions-grid .btn {
    width: 100%;
  }

  .task-form {
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  /* Tasks */
  .tasks-card {
    padding: var(--space-xl);
  }

  .tasks-title {
    font-size: var(--text-xl);
    font-weight: 600;
    margin-bottom: var(--space-lg);
    color: var(--color-text);
  }

  .tasks-list {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: var(--space-sm);
  }

  .task-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--space-md);
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    border-radius: var(--radius-md);
    transition: all var(--transition-fast);
  }

  .task-item:hover {
    border-color: var(--color-border-hover);
    background: var(--color-surface);
  }

  .task-description {
    flex: 1;
    color: var(--color-text);
    font-size: var(--text-sm);
  }

  .task-duration {
    font-family: var(--font-mono);
    font-size: var(--text-sm);
    color: var(--color-muted);
    font-weight: 500;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .timer-display {
      font-size: 3.5rem;
    }

    .actions-grid {
      grid-template-columns: 1fr;
    }

    .timer-card {
      padding: var(--space-2xl);
    }
  }
</style>
